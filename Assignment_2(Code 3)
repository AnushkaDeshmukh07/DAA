#include <iostream>
#include <cmath>
#include <climits>
using namespace std;

bool valid(int per_day, int task[], int n, int d) {
    int cur_day = 0;
    for (int i = 0; i < n; i++) {
        int day_req = ceil((double)(task[i]) / (double)(per_day));
        cur_day += day_req;

        if (cur_day > d) {
            return false;
        }
    }
    return cur_day <= d;
}

int minimumTask(int task[], int n, int d) {
    int left = 1;
    int right = 0;
    for (int i = 0; i < n; i++) {
        right = max(right, task[i]);
    }

    int per_day_task = 0;
    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (valid(mid, task, n, d)) {
            per_day_task = mid;
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return per_day_task;
}
int main() {
    int task[] = {3, 4, 7, 15};
    int n = sizeof(task) / sizeof(task[0]);
    int D = 10;

    cout << minimumTask(task, n, D) << endl;
    return 0;
}
