#include <iostream>
#include <algorithm>
using namespace std;

void findSubsets(int index, int arr[], int n, int currentSubset[], int currentSize, int allSubsets[][10], int& totalSubsets) {
    // Store the current subset
    for (int i = 0; i < currentSize; i++) {
        allSubsets[totalSubsets][i] = currentSubset[i];
    }
    totalSubsets++;

    // Generate subsets
    for (int i = index; i < n; i++) {
        // Skip duplicates
        if (i > index && arr[i] == arr[i - 1]) 
            continue;
        currentSubset[currentSize] = arr[i];
        findSubsets(i + 1, arr, n, currentSubset, currentSize + 1, allSubsets, totalSubsets);
    }
}

void getAllSubsets(int arr[], int n) {
    sort(arr, arr + n);  // Sort to handle duplicates
    int allSubsets[100][10];  // Assuming at most 100 subsets, each subset with at most 10 elements
    int currentSubset[10];    // To hold a single subset
    int totalSubsets = 0;

    // Initialize the subset array to zero to prevent garbage values
    for (int i = 0; i < 100; i++) {
        for (int j = 0; j < 10; j++) {
            allSubsets[i][j] = -1;  // Using -1 as a marker for empty positions
        }
    }

    findSubsets(0, arr, n, currentSubset, 0, allSubsets, totalSubsets);

    // Print all subsets
    for (int i = 0; i < totalSubsets; i++) {
        cout << "[";
        for (int j = 0; j < 10; j++) {
            if (allSubsets[i][j] != -1) {  
// Check if the value is not -1
                cout << allSubsets[i][j];
                if (allSubsets[i][j + 1] != -1)
// Check if the next value exists
                    cout << ", ";
            } else {
                break;  
// Stop printing when we encounter the -1 marker
            }
        }
        cout << "] ";
    }
}
int main() {
    int arr[] = {1, 2, 2};
    int n = sizeof(arr) / sizeof(arr[0]);
    getAllSubsets(arr, n);
    return 0;
}
